# vim: fileencoding=utf-8

"""
Automated tests for py2deb
==========================
"""

# Standard library modules.
import fnmatch
import functools
import glob
import logging
import os
import re
import shutil
import tempfile

# External dependencies.
import coloredlogs
from deb_pkg_tools.package import inspect_package
from executor import execute

# Initialize a logger.
logger = logging.getLogger(__name__)
execute = functools.partial(execute, logger=logger)

# Initialize (verbose) logging to the terminal.
coloredlogs.install()
coloredlogs.increase_verbosity()

# Find the sample packages that we're going to build during our tests.
TESTS_DIRECTORY = os.path.dirname(os.path.abspath(__file__))
TRIVIAL_PACKAGE_DIRECTORY = os.path.join(TESTS_DIRECTORY, 'samples', 'trivial-package')

def test_conversion_of_simple_package():

    """
    Convert a simple Python package (coloredlogs_) without any dependencies to
    a Debian package archive and sanity check the result. The conversion is
    done twice, once for each backend (stdeb vs pip-accel). Performs several
    static checks on the metadata and contents of the resulting package
    archive.

    .. _coloredlogs: https://pypi.python.org/pypi/coloredlogs
    """

    for py2deb_backend_option in ['--with-stdeb', '--with-pip-accel']:

        # Use a temporary directory as py2deb's repository directory so that we
        # can easily find the *.deb archive generated by py2deb.
        with TemporaryDirectory() as directory:

            # Run py2deb as a subprocess so that everything including py2deb.main() is run.
            execute('py2deb', '--repository=%s' % directory, py2deb_backend_option, 'coloredlogs==0.4.8')

            # Find the generated Debian package archive.
            archives = glob.glob('%s/*.deb' % directory)
            logger.debug("Found generated archive(s): %s", archives)
            assert len(archives) == 1

            # Use deb-pkg-tools to inspect the generated package.
            metadata, contents = inspect_package(archives[0])
            logger.debug("Metadata of generated package: %s", dict(metadata))
            logger.debug("Contents of generated package: %s", dict(contents))

            # Check the package metadata. It should look something like this:
            #
            # The package metadata produced by the stdeb backend:
            #
            #   {'Architecture': 'all',
            #    'Depends': 'python2.7, python (>= 2.7.1-0ubuntu2), python (<< 2.8)',
            #    'Description': 'Packaged by py2deb on May 7, 2014 at 00:58',
            #    'Installed-Size': '82',
            #    'Maintainer': 'Peter Odding <peter@peterodding.com>',
            #    'Package': 'python-coloredlogs',
            #    'Priority': 'optional',
            #    'Section': 'python',
            #    'Source': 'coloredlogs',
            #    'Version': '0.4.8-1'}
            #
            # The package metadata produced by the pip-accel backend:
            #
            #   ?
            #
            assert metadata['Package'] == 'python-coloredlogs'
            assert metadata['Version'].startswith('0.4.8')
            assert metadata['Architecture'] == 'all'

            # There should be exactly one dependency: some version of Python.
            assert has_dependency(metadata['Depends'], r'^python(\d+(\.\d+)*)?$')

            # Don't care about the format here as long as essential information is retained.
            assert 'Peter Odding' in metadata['Maintainer']
            assert 'peter@peterodding.com' in metadata['Maintainer']

            # Check the package contents. It should look something like this:
            #
            #  {'/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 00:58', target=''),
            #   '/usr/bin/ansi2html': ArchiveEntry(permissions='-rwxr-xr-x', owner='root', group='root', size=317, modified='2014-05-07 00:58', target=''),
            #   '/usr/lib/python2.7/dist-packages/coloredlogs/__init__.py': ArchiveEntry(permissions='lrwxrwxrwx', owner='root', group='root', size=0, modified='2014-05-07 00:58', target='../../../../share/pyshared/coloredlogs/__init__.py'),
            #   '/usr/lib/python2.7/dist-packages/coloredlogs/converter.py': ArchiveEntry(permissions='lrwxrwxrwx', owner='root', group='root', size=0, modified='2014-05-07 00:58', target='../../../../share/pyshared/coloredlogs/converter.py'),
            #   '/usr/share/pyshared/coloredlogs/__init__.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=9991, modified='2014-05-07 00:58', target=''),
            #   '/usr/share/pyshared/coloredlogs/converter.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=3816, modified='2014-05-07 00:58', target=''),
            #   ...}

            # Check for the two *.py files that should be installed by the package.
            assert len(find_file(contents, '/usr/lib/python*/dist-packages/coloredlogs/__init__.py')) == 1
            assert len(find_file(contents, '/usr/lib/python*/dist-packages/coloredlogs/converter.py')) == 1

            # Make sure the file ownership and permissions are sane.
            entry = find_file(contents, '/usr/lib/python*/dist-packages/coloredlogs/__init__.py').values()[0]
            assert entry.owner == 'root'
            assert entry.group == 'root'
            assert entry.permissions in ('lrwxrwxrwx', # stdeb (the pyshared mechanism)
                                         '-rw-r--r--') # pip-accel (the dumb backend :-)

def test_conversion_of_package_with_dependencies():

    """
    Convert a Python package that has several dependencies (deb-pkg-tools_) to
    a Debian package archive and sanity check the result. The conversion is
    done twice, once for each backend (stdeb vs pip-accel). Performs static
    checks on the metadata (dependencies) of the resulting package archive.

    .. _deb-pkg-tools: https://pypi.python.org/pypi/deb-pkg-tools
    """

    for py2deb_backend_option in ['--with-stdeb', '--with-pip-accel']:

        # Use a temporary directory as py2deb's repository directory so that we
        # can easily find the *.deb archive generated by py2deb.
        with TemporaryDirectory() as directory:

            # Run py2deb as a subprocess so that everything including py2deb.main() is run.
            execute('py2deb', '--repository=%s' % directory, py2deb_backend_option, 'deb-pkg-tools==1.14.7')

            # Find the generated Debian package archives.
            archives = glob.glob('%s/*.deb' % directory)
            logger.debug("Found generated archive(s): %s", archives)

            # Make sure the expected dependencies have been converted.
            assert sorted(package_name_from_filename(a) for a in archives) == sorted([
                'python-chardet',
                'python-coloredlogs',
                'python-deb-pkg-tools',
                'python-debian',
                'python-executor',
                'python-humanfriendly',
            ])

            # Use deb-pkg-tools to inspect ... deb-pkg-tools :-)
            pathname = find_package_archive(archives, 'python-deb-pkg-tools')
            metadata, contents = inspect_package(pathname)
            logger.debug("Metadata of generated package: %s", dict(metadata))
            logger.debug("Contents of generated package: %s", dict(contents))

            # Check the package metadata. It should look something like this:
            #
            # The package metadata produced by the stdeb backend:
            #
            #   {'Architecture': 'all',
            #    'Depends': 'apt, apt-utils, binutils, dpkg-dev, fakeroot, gnupg, lintian, python (<< 2.8), python (>= 2.7.1-0ubuntu2), python-chardet, python-coloredlogs (>= 0.4.6), python-debian (<< 0.1.22), python-debian (>= 0.1.21), python-executor (>= 1.1), python-humanfriendly (>= 1.7.1), python2.7',
            #    'Description': 'Packaged by py2deb on May 7, 2014 at 01:42',
            #    'Installed-Size': '140',
            #    'Maintainer': 'Peter Odding <peter@peterodding.com>',
            #    'Package': 'python-deb-pkg-tools',
            #    'Priority': 'optional',
            #    'Section': 'python',
            #    'Source': 'deb-pkg-tools',
            #    'Version': '1.14.7-1'}
            #
            # The package metadata produced by the pip-accel backend:
            #
            #   {'Architecture': 'all',
            #    'Depends': 'apt, apt-utils, binutils, dpkg-dev, fakeroot, gnupg, lintian, python-chardet, python-coloredlogs (>= 0.4.6), python-debian (<< 0.1.22), python-debian (>= 0.1.21), python-executor (>= 1.1), python-humanfriendly (>= 1.7.1), python2.7',
            #    'Description': 'Packaged by py2deb on May 7, 2014 at 01:42',
            #    'Installed-Size': '172',
            #    'Maintainer': 'Peter Odding <peter@peterodding.com>',
            #    'Package': 'python-deb-pkg-tools',
            #    'Priority': 'optional',
            #    'Section': 'python',
            #    'Version': '1.14.7-1',
            #    'Xs-Python-Version': '>= 2.6'}

            # Make sure the dependencies defined in `stdeb.cfg' have been preserved.
            for configured_dependency in ['apt', 'apt-utils', 'binutils', 'dpkg-dev', 'fakeroot', 'gnupg', 'lintian']:
                assert has_dependency(metadata['Depends'], '^%s$' % configured_dependency)

            # Make sure the dependencies defined in `setup.py' have been preserved.
            for python_dependency in ['python-chardet', 'python-coloredlogs', 'python-debian', 'python-executor', 'python-humanfriendly']:
                assert has_dependency(metadata['Depends'], '^%s' % python_dependency)

def test_conversion_of_isolated_packages():

    """
    Convert a Python package that has several dependencies to a group of
    "isolated Debian packages" that are installed with a custom name prefix and
    installation prefix and sanity check the result. Also tests the
    ``--rename=FROM,TO`` command line option. Performs static checks on the
    metadata and contents of the resulting package archive.
    """

    # Use a temporary directory as py2deb's repository directory so that we
    # can easily find the *.deb archive generated by py2deb.
    with TemporaryDirectory() as directory:

        # Run py2deb as a subprocess so that everything including py2deb.main() is run.
        execute('py2deb',
                '--repository=%s' % directory,
                '--name-prefix=pip-accel',
                '--install-prefix=/usr/lib/pip-accel',
                # By default py2deb will generate a package called
                # `pip-accel-pip-accel'. The --no-name-prefix=PKG
                # option can be used to avoid this.
                '--no-name-prefix=pip-accel',
                # Strange but valid use case (renaming a dependency):
                # pip-accel-coloredlogs → pip-accel-coloredlogs-renamed
                '--rename=coloredlogs,pip-accel-coloredlogs-renamed',
                'pip-accel==0.12')

        # Find the generated Debian package archives.
        archives = glob.glob('%s/*.deb' % directory)
        logger.debug("Found generated archive(s): %s", archives)

        # Make sure the expected dependencies have been converted.
        assert sorted(package_name_from_filename(a) for a in archives) == sorted([
            'pip-accel',
            'pip-accel-coloredlogs-renamed',
            'pip-accel-humanfriendly',
            'pip-accel-pip',
        ])

        # Use deb-pkg-tools to inspect pip-accel.
        pathname = find_package_archive(archives, 'pip-accel')
        metadata, contents = inspect_package(pathname)
        logger.debug("Metadata of generated package: %s", dict(metadata))
        logger.debug("Contents of generated package: %s", dict(contents))

        # Check the package metadata. It should look something like this:
        #
        #  {'Architecture': 'all',
        #   'Depends': 'pip-accel-coloredlogs-renamed (>= 0.4.6), pip-accel-humanfriendly (>= 1.6), pip-accel-pip (<< 1.5), pip-accel-pip (>= 1.4), python2.7',
        #   'Description': 'Packaged by py2deb on May 7, 2014 at 15:21',
        #   'Installed-Size': '164',
        #   'Maintainer': 'Peter Odding <peter.odding@paylogic.eu>',
        #   'Package': 'my-pip-accel',
        #   'Priority': 'optional',
        #   'Section': 'python',
        #   'Version': '0.12-1'}

        # Make sure the dependencies defined in `setup.py' have been preserved while their names have been converted.
        assert has_dependency(metadata['Depends'], r'^pip-accel-coloredlogs-renamed \(>= 0\.4\.6\)$')
        assert has_dependency(metadata['Depends'], r'^pip-accel-humanfriendly \(>= 1\.6\)$')
        assert has_dependency(metadata['Depends'], r'^pip-accel-pip \(>= 1\.4\)$')
        assert has_dependency(metadata['Depends'], r'^pip-accel-pip \(<< 1\.5\)$')
        assert len(parse_depends(metadata['Depends'])) == 5

        # Check the package contents. It should look something like this:
        #
        #  {'/': ArchiveEntry(permissions='drwx------', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/bin/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/bin/pip-accel': ArchiveEntry(permissions='-rwxr-xr-x', owner='root', group='root', size=368, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/dependency_links.txt': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=1, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/entry_points.txt': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=46, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/PKG-INFO': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=12244, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/requires.txt': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=59, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/SOURCES.txt': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=465, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/top_level.txt': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=10, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/__init__.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=20912, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/bdist.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=13264, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/config.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=1240, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/deps/': ArchiveEntry(permissions='drwxr-xr-x', owner='root', group='root', size=0, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/deps/__init__.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=10728, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/deps/debian.ini': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=724, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/logger.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=325, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/req.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=4603, modified='2014-05-07 15:21', target=''),
        #   '/usr/lib/pip-accel/lib/pip_accel/utils.py': ArchiveEntry(permissions='-rw-r--r--', owner='root', group='root', size=1250, modified='2014-05-07 15:21', target='')}

        # Make sure the executable script has been installed and is marked as executable.
        matches = find_file(contents, '/usr/lib/pip-accel/bin/pip-accel')
        pip_accel_executable = matches['/usr/lib/pip-accel/bin/pip-accel']
        assert pip_accel_executable.permissions == '-rwxr-xr-x'

        # Verify the existence of some expected files (picked more or less at random).
        assert find_file(contents, '/usr/lib/pip-accel/lib/pip_accel/__init__.py')
        assert find_file(contents, '/usr/lib/pip-accel/lib/pip_accel/deps/debian.ini')
        assert find_file(contents, '/usr/lib/pip-accel/lib/pip_accel-0.12.egg-info/PKG-INFO')

        # Verify that all files are installed in the custom installation
        # prefix. We have to ignore directories, otherwise we would start
        # complaining about the parent directories /, /usr, /usr/lib, etc.
        for filename, properties in contents.iteritems():
            is_directory = properties.permissions.startswith('d')
            in_isolated_directory = filename.startswith('/usr/lib/pip-accel/')
            assert is_directory or in_isolated_directory

class TemporaryDirectory(object):

    """
    Easy temporary directory creation & cleanup using the :keyword:`with` statement:

    .. code-block:: python

       with TemporaryDirectory() as directory:
           # Do something useful here.
           assert os.path.isdir(directory)
    """

    def __enter__(self):
        self.temporary_directory = tempfile.mkdtemp()
        logger.debug("Created temporary directory: %s", self.temporary_directory)
        return self.temporary_directory

    def __exit__(self, exc_type, exc_value, traceback):
        logger.debug("Cleaning up temporary directory: %s", self.temporary_directory)
        shutil.rmtree(self.temporary_directory)
        del self.temporary_directory

def package_name_from_filename(pathname):
    """
    Find the name of a Debian package given a filename.

    :param pathname: The pathname of the ``*.deb`` archive (a string).
    :returns: The name of the package (a string).
    """
    filename = os.path.basename(pathname)
    components = filename.split('_')
    return components[0]

def find_package_archive(available_archives, package_name):
    """
    Find the ``*.deb`` archive of a specific package. Raises an exception if
    zero or more than one package archive is found.

    :param available_packages: The pathnames of the available package archives
                               (a list of strings).
    :param package_name: The name of the package whose archive file we're
                         interested in (a string).
    :returns: The pathname of the package archive (a string).
    """
    matches = []
    for pathname in available_archives:
        if package_name_from_filename(pathname) == package_name:
            matches.append(pathname)
    assert len(matches) == 1, "Expected to match exactly one package archive!"
    return matches[0]

def has_dependency(depends_line, package_name):
    """
    Check if a package has a certain dependency.

    :param depends_line: The ``Depends:`` line of a binary package (a string).
    :param package_name: The name/version of the package (a string containing a
                         regular expression).
    :returns: ``True`` if the package has the dependency, ``False`` otherwise.
    """
    for dependency in parse_depends(depends_line):
        if re.match(package_name, dependency.strip()):
            return True

def parse_depends(depends_line):
    """
    Parse the ``Depends:`` line of a binary package.

    :param depends_line: The ``Depends:`` line of a binary package (a string).
    :returns: The dependencies (a list of strings).
    """
    return [d.strip() for d in depends_line.split(',') if d and not d.isspace()]

def find_file(contents, pattern):
    """
    Find the file(s) matching the given filename pattern in the dictionary of
    Debian package archive entries reported by
    :py:func:`deb_pkg_tools.package.inspect_package()`.

    :param contents: The dictionary of package archive entries.
    :param pattern: The filename pattern to match (:py:mod:`fnmatch` syntax).
    :returns: A subset of the original dictionary, containing only entries
              matching the pattern.
    """
    matches = {}
    for filename, metadata in contents.iteritems():
        if fnmatch.fnmatch(filename, pattern):
            matches[filename] = metadata
    return matches

# vim: ts=4 sw=4 et nowrap
